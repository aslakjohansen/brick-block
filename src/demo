#!/usr/bin/env python

# NOTE: Demo 3 triggers a bug in the rdflib when running on python 3.5. It could be this: https://github.com/RDFLib/rdflib/issues/617

from rdflib import Graph, Namespace, URIRef, Literal
import sys

################################################################################
##################################################################### intro ####

# parts of brick to load
brick = {
    'BRICK': {
        'file': 'Brick.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/Brick#'),
        'prefix': 'brick',
    },
    'BRICKFRAME': {
        'file': 'BrickFrame.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickFrame#'),
        'prefix': 'bf',
    },
    'BRICKTAG': {
        'file': 'BrickTag.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickTag#'),
        'prefix': 'btag',
    },
}

# guard: command line arguments
if len(sys.argv)!=2:
    print('Syntax: %s PATH_TO_BRICK PATH_TO_TTL_FILE' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick demo.ttl' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick demo_replaced.ttl' % sys.argv[0])
    exit(1)
brickpath = sys.argv[1]
filename  = sys.argv[2]

# get started on the graph
g = Graph()

# general namespaces
RDF   = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS  = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL   = Namespace('http://www.w3.org/2002/07/owl#')
GROUP = Namespace('http://buildsys.org/ontologies/BrickGroup#')
RHX   = Namespace('http://buildsys.org/ontologies/rotary_heat_exchanger#')
g.parse('brick_group.ttl', format='turtle')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)
g.bind('grp' , GROUP)
g.bind('rhx' , RHX)

# brick namespace
for name in brick:
    g.parse('%s/%s' % (brickpath, brick[name]['file']), format='turtle')
    g.bind(brick[name]['prefix'], brick[name]['namespace'])
    globals()[name] = brick[name]['namespace']

################################################################################
##################################################################### group ####

g.parse(filename, format='turtle')

################################################################################
###################################################################### main ####

print('Demo 1: sensors which are fed by a temperature sensor')
q = '''
SELECT DISTINCT ?sensor_type ?sensor
WHERE {
    ?temp_sensor rdf:type brick:Temperature_Sensor .
    ?temp_sensor bf:feeds+ ?sensor .
    ?sensor rdf:type ?sensor_type .
    ?sensor_type rdfs:subClassOf+ brick:Sensor
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) "%s" %s' % (i+1, result[i][0], result[i][1]))
print('')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print('Demo 2: types of groups which are fed by a temperature sensor')
q = '''
SELECT DISTINCT ?group_type ?group
WHERE {
    ?temp rdf:type brick:Temperature_Sensor .
    ?temp bf:feeds+ ?port .
    ?port rdf:type/rdfs:subClassOf+ grp:Port .
    ?port grp:within ?group .
    ?group rdf:type ?group_type
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) "%s" %s' % (i+1, result[i][0], result[i][1]))
print('')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print('Demo 3: which sensors affects the flow sensor')
q = '''
SELECT DISTINCT ?sensor_type ?sensor
WHERE {
    ?flow_sensor rdf:type brick:Flow_Sensor .
    ?sensor (rhx:affects|bf:feeds)+ ?flow_sensor .
    ?sensor rdf:type ?sensor_type .
    ?sensor_type rdfs:subClassOf+ brick:Sensor
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) "%s" %s' % (i+1, result[i][0], result[i][1]))
print('')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print('Demo 4: find rotary heat exchangers in sequence')
q = '''
SELECT ?rhx1 ?rhx2
WHERE {
    ?rhx1 rdf:type rhx:Rotary_Heat_Exchanger .
    ?rhx1po rdf:type rhx:Primary_Output .
    ?rhx1po grp:within ?rhx1 .
    ?rhx1si rdf:type rhx:Secondary_Input .
    ?rhx1si grp:within ?rhx1 .
    
    ?rhx2 rdf:type rhx:Rotary_Heat_Exchanger .
    ?rhx2pi rdf:type rhx:Primary_Input .
    ?rhx2pi grp:within ?rhx2 .
    ?rhx2so rdf:type rhx:Secondary_Output .
    ?rhx2so grp:within ?rhx2 .
    
    ?rhx1po bf:feeds+ ?rhx2pi .
    ?rhx2so bf:feeds+ ?rhx1si
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) %s -> %s' % (i+1, result[i][0], result[i][1]))
print('')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print('Demo 5: find rotary heat exchangers in parallel (this will take time)')
q = '''
SELECT DISTINCT ?rhx1 ?rhx2
WHERE {
    ?rhx1 rdf:type rhx:Rotary_Heat_Exchanger .
    ?rhx1pi rdf:type rhx:Primary_Input .
    ?rhx1pi grp:within ?rhx1 .
    ?rhx1po rdf:type rhx:Primary_Output .
    ?rhx1po grp:within ?rhx1 .
    ?rhx1si rdf:type rhx:Secondary_Input .
    ?rhx1si grp:within ?rhx1 .
    ?rhx1so rdf:type rhx:Secondary_Output .
    ?rhx1so grp:within ?rhx1 .
    
    ?rhx2 rdf:type rhx:Rotary_Heat_Exchanger .
    ?rhx2pi rdf:type rhx:Primary_Input .
    ?rhx2pi grp:within ?rhx2 .
    ?rhx2po rdf:type rhx:Primary_Output .
    ?rhx2po grp:within ?rhx2 .
    ?rhx2si rdf:type rhx:Secondary_Input .
    ?rhx2si grp:within ?rhx2 .
    ?rhx2so rdf:type rhx:Secondary_Output .
    ?rhx2so grp:within ?rhx2 .
    
    ?common_pi bf:feeds+ ?rhx1pi .
    ?common_pi bf:feeds+ ?rhx2pi .
    ?common_si bf:feeds+ ?rhx1si .
    ?common_si bf:feeds+ ?rhx2si .
    ?rhx1po    bf:feeds+ ?common_po .
    ?rhx2po    bf:feeds+ ?common_po .
    ?rhx1so    bf:feeds+ ?common_so .
    ?rhx2so    bf:feeds+ ?common_so
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) %s -> %s' % (i+1, result[i][0], result[i][1]))
print('')

