#!/usr/bin/env python3.5

from rdflib import Graph, Namespace, URIRef, Literal
from group import Group
import sys

################################################################################
##################################################################### intro ####

# parts of brick to load
brick = {
    'BRICK': {
        'file': 'Brick.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/Brick#'),
        'prefix': 'brick',
    },
    'BRICKFRAME': {
        'file': 'BrickFrame.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickFrame#'),
        'prefix': 'bf',
    },
    'BRICKTAG': {
        'file': 'BrickTag.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickTag#'),
        'prefix': 'btag',
    },
}

# guard: command line arguments
if len(sys.argv)!=2:
    print('Syntax: %s PATH_TO_BRICK' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick' % sys.argv[0])
    exit(1)
brickpath = sys.argv[1]

# get started on the graph
g = Graph()

# general namespaces
RDF   = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS  = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL   = Namespace('http://www.w3.org/2002/07/owl#')
GROUP = Namespace('http://buildsys.org/ontologies/BrickGroup#')
g.parse('brick_group.ttl', format='turtle')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)
g.bind('grp' , GROUP)

# brick namespace
for name in brick:
    g.parse('%s/%s' % (brickpath, brick[name]['file']), format='turtle')
    g.bind(brick[name]['prefix'], brick[name]['namespace'])
    globals()[name] = brick[name]['namespace']

################################################################################
##################################################################### group ####

g.parse('demo.ttl', format='turtle')

################################################################################
###################################################################### main ####

print('Demo 1: sensors which are fed by a temperature sensor')
q = '''
SELECT DISTINCT ?sensor_type ?sensor
WHERE {
    ?temp rdf:type brick:Temperature_Sensor .
    ?temp bf:feeds+ ?sensor .
    ?sensor rdf:type ?sensor_type .
    ?sensor_type rdfs:subClassOf+ brick:Sensor
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) "%s" %s' % (i+1, result[i][0], result[i][1]))
print('')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print('Demo 2: labels of groups which are fed by a temperature sensor')
q = '''
SELECT DISTINCT ?label ?group
WHERE {
    ?temp rdf:type brick:Temperature_Sensor .
    ?temp bf:feeds+ ?port .
    ?port rdf:type grp:Port .
    ?port grp:within ?group .
    ?group grp:labeled ?label
}
'''
result = list(g.query(q))
for i in range(len(result)):
    print(' (%u) "%s" %s' % (i+1, result[i][0], result[i][1]))
print('')

