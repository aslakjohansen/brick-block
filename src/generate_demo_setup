#!/usr/bin/env python3.5

from rdflib import Graph, Namespace, URIRef, Literal
from group import Group
import sys

################################################################################
##################################################################### intro ####

# parts of brick to load
brick = {
    'BRICK': {
        'file': 'Brick.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/Brick#'),
        'prefix': 'brick',
    },
    'BRICKFRAME': {
        'file': 'BrickFrame.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickFrame#'),
        'prefix': 'bf',
    },
    'BRICKTAG': {
        'file': 'BrickTag.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickTag#'),
        'prefix': 'btag',
    },
}

# guard: command line arguments
if len(sys.argv)!=2:
    print('Syntax: %s PATH_TO_BRICK' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick' % sys.argv[0])
    exit(1)
brickpath = sys.argv[1]

# get started on the graph
g = Graph()

# general namespaces
RDF   = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS  = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL   = Namespace('http://www.w3.org/2002/07/owl#')
GROUP = Namespace('http://buildsys.org/ontologies/BrickGroup#')
g.parse('brick_group.ttl', format='turtle')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)
g.bind('grp' , GROUP)

# brick namespace
for name in brick:
    g.parse('%s/%s' % (brickpath, brick[name]['file']), format='turtle')
    g.bind(brick[name]['prefix'], brick[name]['namespace'])
    globals()[name] = brick[name]['namespace']

################################################################################
##################################################################### group ####

# seq rotary heat exchanger namespace
DEMO = Namespace('http://buildsys.org/ontologies/seq_rotary_heat_exchanger#')
g.bind('demo', DEMO)

################################################################################
###################################################################### main ####

exchanger_group = Group('brick_tbt_rotary_heat_exchanger.ttl')

# instantiate rotary heat exchanger complex
exchanger = exchanger_group.instantiate(DEMO, 'exchanger_complex')
g += exchanger['graph']
for port in exchanger['ports']:
    print('exchanger: %s â†¦ %s' % (port, exchanger['ports'][port]))

# names
sensor_pi = DEMO['sensor_pi']
sensor_po = DEMO['sensor_po']
sensor_si = DEMO['sensor_si']
sensor_so = DEMO['sensor_so']

# definitions
g.add( (sensor_pi, RDF.type, BRICK['Temperature_Sensor']) )
g.add( (sensor_po, RDF.type, BRICK['Humidity_Sensor']) )
g.add( (sensor_si, RDF.type, BRICK['Pressure_Sensor']) )
g.add( (sensor_so, RDF.type, BRICK['Flow_Sensor']) )

# feeds relationships
g.add( (sensor_pi                               , BRICKFRAME.feeds, exchanger['ports']['Primary Input']) )
g.add( (exchanger['ports']['Primary Output']  , BRICKFRAME.feeds, sensor_po) )
g.add( (sensor_si                               , BRICKFRAME.feeds, exchanger['ports']['Secondary Input']) )
g.add( (exchanger['ports']['Secondary Output'], BRICKFRAME.feeds, sensor_so) )

# store result
print('Number of relations: %u' % (len(g)))
g.serialize('demo.ttl', 'turtle')

