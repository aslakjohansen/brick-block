#!/usr/bin/env python3.5

from rdflib import Graph, Namespace, URIRef, Literal
import group
import sys

################################################################################
##################################################################### intro ####

# parts of brick to load
brick = {
    'BRICK': {
        'file': 'Brick.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/Brick#'),
        'prefix': 'brick',
    },
    'BRICKFRAME': {
        'file': 'BrickFrame.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickFrame#'),
        'prefix': 'bf',
    },
    'BRICKTAG': {
        'file': 'BrickTag.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickTag#'),
        'prefix': 'btag',
    },
}

# guard: command line arguments
if len(sys.argv)!=2:
    print('Syntax: %s PATH_TO_BRICK' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick' % sys.argv[0])
    exit(1)
brickpath = sys.argv[1]

# get started on the graph
g = Graph()

# general namespaces
RDF   = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS  = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL   = Namespace('http://www.w3.org/2002/07/owl#')
GROUP = Namespace('http://buildsys.org/ontologies/BrickGroup#')
g.parse('brick_group.ttl', format='turtle')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)
g.bind('grp' , GROUP)

# brick namespace
for name in brick:
    g.parse('%s/%s' % (brickpath, brick[name]['file']), format='turtle')
    g.bind(brick[name]['prefix'], brick[name]['namespace'])
    globals()[name] = brick[name]['namespace']

## demo
#DEMO = Namespace('http://buildsys.org/ontologies/demo#')
#g.bind('demo', DEMO)

# rotary heat exchanger namespace
RHX = Namespace('http://buildsys.org/ontologies/rotary_heat_exchanger#')
g.bind('rhx', RHX)

# load demo
g.parse('demo.ttl', format='turtle')
DEMO = g.namespace_manager.store.namespace('demo')
print(DEMO)
print(type(g.namespace_manager.store.namespace('demo')))

################################################################################
###################################################################### main ####

# find one rotary heat exchanger
q = '''
SELECT DISTINCT ?group
WHERE {
    ?group rdf:type rhx:Rotary_Heat_Exchanger .
}
'''
demo_group = list(g.query(q))[0][0]
print(demo_group)

# replace that component
group.replace(g, demo_group, 'passthrough.ttl', DEMO, 'replacement')

# store result
print('Number of relations: %u' % (len(g)))
g.serialize('demo.ttl', 'turtle')

