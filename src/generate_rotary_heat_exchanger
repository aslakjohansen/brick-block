#!/usr/bin/env python3.5

from rdflib import Graph, Namespace, URIRef, Literal
import sys

# parts of brick to load
brick = {
    'BRICK': {
        'file': 'Brick.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/Brick#'),
        'prefix': 'brick',
    },
    'BRICKFRAME': {
        'file': 'BrickFrame.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickFrame#'),
        'prefix': 'bf',
    },
    'BRICKTAG': {
        'file': 'BrickTag.ttl',
        'namespace': Namespace('http://buildsys.org/ontologies/BrickTag#'),
        'prefix': 'btag',
    },
}

# guard: command line arguments
if len(sys.argv)!=2:
    print('Syntax: %s PATH_TO_BRICK' % sys.argv[0])
    print('        %s ../../GroundTruth/Brick' % sys.argv[0])
    exit(1)
brickpath = sys.argv[1]

# get started on the graph
g = Graph()

# general namespaces
RDF   = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS  = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL   = Namespace('http://www.w3.org/2002/07/owl#')
GROUP = Namespace('http://buildsys.org/ontologies/BrickGroup#')
g.parse('brick_group.ttl', format='turtle')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)
g.bind('grp' , GROUP)

# brick namespace
for name in brick:
    g.parse('%s/%s' % (brickpath, brick[name]['file']), format='turtle')
    g.bind(brick[name]['prefix'], brick[name]['namespace'])
    globals()[name] = brick[name]['namespace']

# rotary heat exchanger namespace
RHX = Namespace('http://buildsys.org/ontologies/rotary_heat_exchanger#')
g.bind('rhx', RHX)

# generate classes
class_group   = RHX['Rotary_Heat_Exchanger']
class_port_pi = RHX['Primary_Input']
class_port_po = RHX['Primary_Output']
class_port_si = RHX['Secondary_Input']
class_port_so = RHX['Secondary_Output']
g.add( (class_group  , RDFS.subClassOf, GROUP.Group) )
g.add( (class_port_pi, RDFS.subClassOf, GROUP.Port) )
g.add( (class_port_po, RDFS.subClassOf, GROUP.Port) )
g.add( (class_port_si, RDFS.subClassOf, GROUP.Port) )
g.add( (class_port_so, RDFS.subClassOf, GROUP.Port) )

# generate group
group   = RHX['group']
port_pi = RHX['ports/pi']
port_po = RHX['ports/po']
port_si = RHX['ports/si']
port_so = RHX['ports/so']
g.add( (group  , RDF.type, class_group) )
g.add( (port_pi, RDF.type, class_port_pi) )
g.add( (port_po, RDF.type, class_port_po) )
g.add( (port_si, RDF.type, class_port_si) )
g.add( (port_so, RDF.type, class_port_so) )

# generate contents definitions
Affects = RHX['affects']
g.add( (Affects, RDF['type'], OWL['ObjectProperty']) )
Side = RHX['types/Side']
g.add( (Side, RDF.type, OWL.Class) )

# generate contents
p = RHX['contents/primary']
s = RHX['contents/secondary']
g.add( (p, RDF.type, Side) )
g.add( (s, RDF.type, Side) )
g.add( (port_pi, BRICKFRAME.feeds, p) )
g.add( (p      , BRICKFRAME.feeds, port_po) )
g.add( (port_si, BRICKFRAME.feeds, s) )
g.add( (s      , BRICKFRAME.feeds, port_so) )
g.add( (p, Affects, s) )

# generate grouping relationships
for entity in [port_pi, port_po, port_si, port_so, p, s]:
    g.add( (entity, GROUP.within, group) )

# store result
print('Number of relations: %u' % (len(g)))
g.serialize('brick_rotary_heat_exchanger.ttl', 'turtle')

